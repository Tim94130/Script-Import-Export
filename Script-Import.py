# Importation des biblioth√®ques n√©cessaires
import pandas as pd
from tkinter import Tk, filedialog
import os
import re
from rapidfuzz import process, fuzz
from collections import defaultdict

############################################
# Fonctions de transformation du CSV
############################################??

def renommer_colonnes_pour_woocommerce(df):
    """
    Renomme automatiquement les colonnes du CSV en utilisant les noms exacts attendus par WooCommerce.
    """
    correspondance_woocommerce = {
        "R√©f√©rence": "SKU",
        "Nom de l'article (en Fran√ßais)": "Name",
        "Description courte (en Fran√ßais)": "Short description",
        "Description (en Fran√ßais)": "Description",
        "Prix pour le groupe D√©faut": "Regular price",
        "Stock - Quantit√©": "Stock",
        "Option Couleur (en Fran√ßais)": "Attribute 1 value(s)",
        "Option Taille (en Fran√ßais)": "Attribute 2 value(s)",
        "Poids (en Kg)": "Weight (kg)",
        "Longueur (en cm)": "Length (cm)",
        "Largeur (en cm)": "Width (cm)",
        "Hauteur (en cm)": "Height (cm)",
        "Cat√©gories": "Categories",
        "Parent": "Parent",
        "Images": "Images",
        "Garantie": "Warranty",
        "Pays de fabrication": "Country of manufacture",
        "Marque": "Brand"
    }
    df.rename(columns=correspondance_woocommerce, inplace=True)
    return df

def supprimer_doublons_colonnes(df):
    """
    Supprime les colonnes en double en gardant celles en anglais.
    """
    correspondance_woocommerce = {
        "R√©f√©rence": "SKU",
        "Nom de l'article (en Fran√ßais)": "Name",
        "Description courte (en Fran√ßais)": "Short description",
        "Description (en Fran√ßais)": "Description",
        "Prix pour le groupe D√©faut": "Regular price",
        "Prix de vente conseill√©": "Sale price",
        "Stock - Quantit√©": "Stock",
        "Option Couleur (en Fran√ßais)": "Attribute 1 value(s)",
        "Option Taille (en Fran√ßais)": "Attribute 2 value(s)",
        "Poids (en Kg)": "Weight (kg)",
        "Longueur (en cm)": "Length (cm)",
        "Largeur (en cm)": "Width (cm)",
        "Hauteur (en cm)": "Height (cm)",
        "Cat√©gories": "Categories",
        "Parent": "Parent",
        "Images": "Images",
        "Garantie": "Warranty",
        "Pays de fabrication": "Country of manufacture",
        "Marque": "Brand"
    }
    colonnes_presentes = df.columns
    colonnes_a_supprimer = [fr_col for fr_col, en_col in correspondance_woocommerce.items() 
                            if fr_col in colonnes_presentes and en_col in colonnes_presentes]
    df.drop(columns=colonnes_a_supprimer, inplace=True, errors='ignore')
    return df

def ajuster_categories(df):
    """
    Fusionne les colonnes de cat√©gories en une seule colonne "Categories" s√©par√©e par ' > '.
    """
    colonnes_categories = [
        'Nom de la cat√©gorie de niveau 1 (en Fran√ßais)',
        'Nom de la cat√©gorie de niveau 2 (en Fran√ßais)',
        'Nom de la cat√©gorie de niveau 3 (en Fran√ßais)',
        'Nom de la cat√©gorie de niveau 4 (en Fran√ßais)',
    ]
    colonnes_existantes = [col for col in colonnes_categories if col in df.columns]
    if colonnes_existantes:
        df['Categories'] = df[colonnes_existantes].apply(lambda x: ' > '.join(x.dropna()), axis=1)
    if 'Cat√©gorie principale du produit' in df.columns:
        df['Categories'] = df.apply(
            lambda x: f"{x['Categories']} | {x['Cat√©gorie principale du produit']}" 
            if pd.notnull(x['Cat√©gorie principale du produit']) else x['Categories'],
            axis=1
        )
    df.drop(columns=colonnes_existantes + ['Cat√©gorie principale du produit'], inplace=True, errors='ignore')
    return df

def formatter_images(df):
    """
    Fusionne les colonnes d'images en une seule colonne "Images" en y ajoutant l'URL de base.
    """
    base_url = "http://localhost/Yolo-baby/wp-content/uploads/image-site/"
    colonnes_images = [
        "Image principale",
        "Image suppl√©mentaire n¬∞1",
        "Image suppl√©mentaire n¬∞2",
        "Image suppl√©mentaire n¬∞3",
        "Image suppl√©mentaire n¬∞4",
        "Image suppl√©mentaire n¬∞5",
        "Image suppl√©mentaire n¬∞6",
        "Image suppl√©mentaire n¬∞7",
        "Image suppl√©mentaire n¬∞8",
        "Image suppl√©mentaire n¬∞9"
    ]
    colonnes_existantes = [col for col in colonnes_images if col in df.columns]
    if not colonnes_existantes:
        print("‚ö†Ô∏è Aucune colonne d'image trouv√©e, la colonne 'Images' ne sera pas cr√©√©e.")
        return df
    df['Images'] = df[colonnes_existantes].apply(lambda row: ', '.join(
        [base_url + img.strip() for img in row.dropna().astype(str)]
    ), axis=1)
    print("üîç V√©rification des images fusionn√©es avec URLs compl√®tes :")
    print(df[['SKU', 'Images']].head())
    if df['Images'].isnull().all():
        print("‚ö†Ô∏è Aucune image fusionn√©e, les colonnes originales ne seront pas supprim√©es.")
    else:
        print("‚úÖ Fusion des images r√©ussie avec URLs, suppression des colonnes d'origine.")
        df.drop(columns=colonnes_existantes, inplace=True, errors='ignore')
    return df

def formater_produits(df):
    """
    Reformate les produits pour WooCommerce en mappant les colonnes importantes.
    """
    df['Type'] = df.apply(lambda x: 'variable' if pd.notnull(x.get('Option Couleur (en Fran√ßais)')) else 'simple', axis=1)
    df['Published'] = 1
    df['Is featured?'] = 0
    df['Visibility in catalog'] = 'visible'
    df['Tax status'] = 'taxable'
    df['In stock?'] = 1
    df['Stock'] = df.get('Stock - Quantit√©', 0).fillna(0)
    df['Regular price'] = df.get('Prix pour le groupe D√©faut', '').fillna('')
    df['Sale price'] = ''
    df['SKU'] = df['R√©f√©rence']
    df['Name'] = df["Nom de l'article (en Fran√ßais)"]
    df['Short description'] = df['Description courte (en Fran√ßais)']
    df['Description'] = df['Description (en Fran√ßais)']
    if 'Brand' in df.columns:
        df['Tags'] = df['Brand'].apply(lambda x: ', '.join(map(str, str(x).split('|'))) if pd.notnull(x) else '')
    return df

############################################
# Fonctions de d√©tection de couleurs
############################################

couleurs_base = [
    "white", "black", "brown", "blue", "red", "pink", "green", 
    "grey", "gray", "yellow", "orange", "purple", "violet",
    "beige", "gold", "silver", 
    "cyan", "magenta", "navy", "maroon", "lime", "olive", "teal", "aqua",
    "blanc", "noir", "marron", "brun", "bleu", "rouge", "rose", 
    "vert", "gris", "jaune", "violet", "beige", "dor√©", "argent", "kaki",
    "turquoise", "fuchsia", "lavande", "ocre", "ivory", "ivoires", "argent√©"
]

adjectifs_ignores = [
    "dark", "light", "pale", "deep", "bright", "medium",
    "fonce", "fonc√©", "clair", "p√¢le", "flashy", "fluorescent"
]

mapping_couleurs = {
    "white": "Blanc",
    "black": "Noir",
    "brown": "Marron",
    "blue": "Bleu",
    "red": "Rouge",
    "pink": "Rose",
    "green": "Vert",
    "grey": "Gris",
    "gray": "Gris",
    "yellow": "Jaune",
    "orange": "Orange",
    "purple": "Violet",
    "violet": "Violet",
    "beige": "Beige",
    "gold": "Dor√©",
    "silver": "Argent",
    "blanc": "Blanc",
    "noir": "Noir",
    "marron": "Marron",
    "brun": "Marron",
    "bleu": "Bleu",
    "rouge": "Rouge",
    "rose": "Rose",
    "vert": "Vert",
    "gris": "Gris",
    "jaune": "Jaune",
    "dor√©": "Dor√©",
    "argent": "Argent",
    "kaki": "Kaki",
    "fushia": "Fuchsia",
    "whiteoff": "Blanc cass√©",
}

def detecter_toutes_couleurs(nom_produit: str):
    """
    Retourne la liste de toutes les couleurs d√©tect√©es dans le nom du produit,
    en ignorant les adjectifs (ex. dark, light, etc.).
    """
    if not isinstance(nom_produit, str):
        return []
    tokens = re.split(r"[\s\-\|\(\),/]+", nom_produit.lower())
    print(f"Produit : {nom_produit}")
    print(f"Tokens  : {tokens}")
    trouvees = []
    for t in tokens:
        if t in adjectifs_ignores:
            continue
        if t in couleurs_base and t not in trouvees:
            trouvees.append(t)
    return trouvees

def normaliser_liste_couleurs(couleurs_brutes: list):
    """
    Convertit chaque couleur brute en version FR normalis√©e via mapping_couleurs.
    Retourne une cha√Æne, ex: "Marron, Vert".
    """
    if not couleurs_brutes:
        return ""
    resultat = []
    for c in couleurs_brutes:
        c_lower = c.lower()
        resultat.append(mapping_couleurs.get(c_lower, "Non sp√©cifi√©e"))
    resultat = list(dict.fromkeys(resultat))
    return ", ".join(resultat)

def nom_sans_couleur(nom_produit: str) -> str:
    """
    Renvoie le "nom de base" en retirant la derni√®re partie apr√®s un tiret (basique).
    """
    parts = nom_produit.split("-")
    if len(parts) > 1:
        return "-".join(parts[:-1]).strip()
    else:
        return nom_produit.strip()

############################################
# Fonction pour cr√©er produits group√©s et variables
############################################

def creer_produits_grouped_et_variables_par_couleur(df):
    """
    Transforme df en un DataFrame adapt√© √† WooCommerce en cr√©ant :
      - Pour les produits dont le "Nom Base" contient "pack" (insensible √† la casse) :
          * Un produit parent de type "grouped".
          * Pour chaque ligne du groupe, un produit enfant de type "simple" avec Parent = SKU du parent.
      - Pour les autres produits (non "pack") :
          * S'il n'y a qu'une seule ligne pour un m√™me "Nom Base", le produit reste "simple".
          * S'il y a plusieurs lignes, on cr√©e :
              - Une ligne parent (Type = "variable") qui agr√®ge toutes les couleurs uniques d√©tect√©es dans "Couleurs Normalis√©es".
              - Une ligne variation par couleur unique (Type = "variation") avec Parent = SKU du parent.
              - Pour chaque variation, la galerie compl√®te d'images du parent est affect√©e (champ "Images").
              - De plus, pour √©viter les erreurs de GTIN/EAN dupliqu√©s, la colonne "Code EAN" est vid√©e pour les variations.
              
    Hypoth√®ses :
      - df["Couleurs Normalis√©es"] contient une cha√Æne de couleurs s√©par√©es par des virgules (ex: "Rouge, Vert").
      - La fonction nom_sans_couleur() extrait le "Nom Base" √† partir de "Name".
      - Le SKU du parent est celui de la premi√®re ligne du groupe.
      - Pour les variations, le SKU est form√© du SKU parent + "-" + la couleur en minuscules.
    """
    rows = []
    df["Nom Base"] = df["Name"].apply(nom_sans_couleur)
    groupes = df.groupby("Nom Base", dropna=False)
    
    for base_name, group in groupes:
        print(f"\n>>> Traitement du groupe : '{base_name}' avec {len(group)} ligne(s)")
        if "pack" in base_name.lower():
            parent = group.iloc[0].copy()
            sku_parent = str(parent.get("SKU", ""))
            parent["Type"] = "grouped"
            parent["Parent"] = ""
            parent["Attribute 1 name"] = ""
            parent["Attribute 1 value(s)"] = ""
            parent["Attribute 1 visible"] = ""
            parent["Attribute 1 variation"] = ""
            parent["Attribute 1 global"] = ""
            parent["Variations"] = ""
            rows.append(parent)
            print(f"  -> Produit group√© cr√©√© (SKU: {sku_parent})")
            for _, row_src in group.iterrows():
                enfant = row_src.copy()
                enfant["Type"] = "simple"
                enfant["Parent"] = sku_parent
                rows.append(enfant)
                print(f"     -> Enfant group√© ajout√© (SKU: {enfant.get('SKU', '')})")
        else:
            if len(group) == 1:
                simple = group.iloc[0].copy()
                simple["Type"] = "simple"
                simple["Parent"] = ""
                simple["Variations"] = ""
                rows.append(simple)
                print(f"  -> Produit simple (SKU: {simple.get('SKU', '')})")
            else:
                parent = group.iloc[0].copy()
                sku_parent = str(parent.get("SKU", ""))
                set_couleurs = set()
                for _, row_src in group.iterrows():
                    c_str = row_src.get("Couleurs Normalis√©es", "")
                    if c_str:
                        for coul in c_str.split(","):
                            coul = coul.strip()
                            if coul:
                                set_couleurs.add(coul)
                if not set_couleurs:
                    print(f"‚ö†Ô∏è Aucune couleur d√©tect√©e pour '{base_name}', trait√© comme produit simple.")
                    for _, row_src in group.iterrows():
                        simple = row_src.copy()
                        simple["Type"] = "simple"
                        simple["Parent"] = ""
                        simple["Variations"] = ""
                        rows.append(simple)
                else:
                    parent["Type"] = "variable"
                    parent["Parent"] = ""
                    parent["Attribute 1 name"] = "Couleur"
                    parent["Attribute 1 value(s)"] = ", ".join(sorted(set_couleurs))
                    parent["Attribute 1 visible"] = "yes"
                    parent["Attribute 1 variation"] = "yes"
                    parent["Attribute 1 global"] = "yes"
                    parent["Variations"] = ", ".join(sorted(set_couleurs))
                    rows.append(parent)
                    print(f"  -> Produit parent variable cr√©√© (SKU: {sku_parent}) avec couleurs : {', '.join(sorted(set_couleurs))}")
                    
                    images_parent = ""
                    if "Images" in parent and parent["Images"]:
                        images_parent = parent["Images"].strip()
                        print(f"     -> Galerie du parent (SKU: {sku_parent}): {images_parent}")
                    else:
                        print(f"     -> Aucune image d√©finie pour le parent (SKU: {sku_parent}).")
                    
                    for coul in sorted(set_couleurs):
                        variation = parent.copy()
                        variation["SKU"] = f"{sku_parent}-{coul.lower()}"
                        variation["Type"] = "variation"
                        variation["Parent"] = sku_parent
                        variation["Attribute 1 name"] = "Couleur"
                        variation["Attribute 1 value(s)"] = coul
                        variation["Attribute 1 visible"] = "yes"
                        variation["Attribute 1 variation"] = "yes"
                        variation["Attribute 1 global"] = "yes"
                        variation["Variations"] = ""
                        variation["Description"] = ""
                        variation["Short description"] = ""
                        # Affecter la galerie compl√®te du parent √† la variation
                        variation["Images"] = images_parent
                        # Pour √©viter les erreurs de GTIN/EAN dupliqu√©s, on vide la colonne "Code EAN"
                        variation["Code EAN"] = ""
                        rows.append(variation)
                        print(f"  -> Variation cr√©√©e pour '{base_name}' : Couleur = {coul}, SKU = {variation['SKU']}, Images = {variation['Images']}")
                        
    df_res = pd.DataFrame(rows)
    return df_res

############################################
# Fonction principale
############################################

def main():
    """
    G√®re l'ex√©cution principale du script.
    Permet de s√©lectionner un fichier CSV, le traiter et sauvegarder un fichier final
    qui contient toutes les modifications (renommage, formatage, d√©tection des couleurs),
    la suppression des colonnes en double, ET la structure produit variable ou group√©.
    """
    root = Tk()
    root.withdraw()
    
    chemin_fichier = filedialog.askopenfilename(
        filetypes=[("CSV Files", "*.csv")],
        title="S√©lectionnez le fichier CSV"
    )
    if not chemin_fichier:
        print("Aucun fichier s√©lectionn√©. Fermeture du script.")
        return

    try:
        df = pd.read_csv(chemin_fichier)
        print(f"üìÇ Fichier charg√© avec succ√®s : {os.path.basename(chemin_fichier)}")
        
        # 1. Renommer les colonnes pour WooCommerce
        df_modifie = renommer_colonnes_pour_woocommerce(df)
        print("‚úÖ Colonnes renomm√©es pour WooCommerce.")
        
        # 2. Supprimer les colonnes en double
        df_modifie = supprimer_doublons_colonnes(df_modifie)
        print("‚úÖ Colonnes en double supprim√©es (si pr√©sentes).")
        
        # 3. Ajuster les cat√©gories
        df_modifie = ajuster_categories(df_modifie)
        print("‚úÖ Cat√©gories ajust√©es.")
        
        # 4. Formater les images
        df_modifie = formatter_images(df_modifie)
        print("‚úÖ Images format√©es.")
        
        # 5. D√©tection des couleurs bas√©e sur "Name"
        if "Name" in df_modifie.columns:
            df_modifie["Liste Couleurs Brutes"] = df_modifie["Name"].apply(detecter_toutes_couleurs)
            df_modifie["Couleurs Normalis√©es"] = df_modifie["Liste Couleurs Brutes"].apply(normaliser_liste_couleurs)
            df_modifie["Attribute 1 name"] = "Couleur"
            df_modifie["Attribute 1 value(s)"] = df_modifie["Couleurs Normalis√©es"]
            df_modifie["Attribute 1 visible"] = 1
            df_modifie["Attribute 1 global"] = 1
            print("‚úÖ Couleurs d√©tect√©es et colonnes d'attributs remplies.")
        else:
            print("‚ö†Ô∏è La colonne 'Name' n'existe pas, impossible de d√©tecter la couleur !")
        
        # 6. Cr√©ation du DataFrame final avec structure produit variable ou group√©
        df_final = creer_produits_grouped_et_variables_par_couleur(df_modifie)
        print("‚úÖ Structure produit (variables/group√©s) cr√©√©e.")
        
        # 7. Export du CSV final complet
        nouveau_chemin = os.path.splitext(chemin_fichier)[0] + "_final.csv"
        df_final.to_csv(nouveau_chemin, index=False, sep=",", encoding="utf-8-sig")
        print(f"‚úÖ Fichier final export√© avec succ√®s : {nouveau_chemin}")
    
    except Exception as e:
        print(f"‚ùå Une erreur est survenue : {e}")

if __name__ == "__main__":
    main()
